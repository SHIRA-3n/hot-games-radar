# „Äê„Åì„ÅÆÂÜÖÂÆπ„Åß radar/signals/market_health.py „Çí‰ΩúÊàê„Éª‰øùÂ≠ò„Åó„Å¶„Åè„Å†„Åï„ÅÑ„Äë

import asyncio

# „Åì„ÅÆ„Çª„É≥„Çµ„Éº„ÅØÈùûÂêåÊúü„ÅßÂãï‰Ωú„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô
async def score(game, cfg, twitch_api, **_):
    """
    Twitch API„Çí‰Ωø„ÅÑ„ÄÅÈÖç‰ø°ËÄÖ1‰∫∫„ÅÇ„Åü„Çä„ÅÆË¶ñËÅ¥ËÄÖÊï∞„Å®„ÄÅ
    „Éà„ÉÉ„ÉóÈÖç‰ø°ËÄÖ„Å∏„ÅÆ‰∫∫Ê∞óÈõÜ‰∏≠Â∫¶„ÇíÂàÜÊûê„Åô„Çã„ÄÇ
    """
    # config.yaml„Åã„Çâ„ÄÅ„Åì„ÅÆ„Ç¢„Éä„É™„Çπ„Éà„Åå‰Ωø„ÅÜ2„Å§„ÅÆ„É´„Éº„É´„ÇíË™≠„ÅøËæº„ÇÄ
    vpc_weight = cfg.get('weights', {}).get('viewers_per_ch', 0)
    top_share_penalty = cfg.get('penalties', {}).get('top_share', {})
    
    # „É´„Éº„É´„Åå‰Ωï„ÇÇË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„Åë„Çå„Å∞„ÄÅ‰Ωï„ÇÇ„Åó„Å™„ÅÑ
    if vpc_weight == 0 and not top_share_penalty:
        return {}

    streams = []
    total_viewers = 0
    
    try:
        # „Åì„ÅÆ„Ç≤„Éº„É†„ÅÆÈÖç‰ø°„ÇíÊúÄÂ§ß100‰ª∂„Åæ„ÅßÂèñÂæó
        # ÂÖ®‰∏ñÁïå„ÅÆÈÖç‰ø°ËÄÖ„ÇíÂØæË±°„Å´ÂàÜÊûê„Åô„Çã„Åü„ÇÅ„ÄÅlanguage„Éï„Ç£„É´„Çø„Éº„ÅØ„Åã„Åë„Å™„ÅÑ
        async for stream in twitch_api.get_streams(game_id=[game['id']], first=100):
            streams.append(stream)
            total_viewers += stream.viewer_count
        
        # ÈÖç‰ø°„ÅåÂÖ®„Åè„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅÂàÜÊûê‰∏çËÉΩ„Å™„ÅÆ„ÅßÁµÇ‰∫Ü
        if not streams:
            return {}
        
        streamer_count = len(streams)
        final_scores = {}
        final_flags = []

        # --- ÂàÜÊûê‚ë†ÔºöÈÖç‰ø°ËÄÖ1‰∫∫„ÅÇ„Åü„Çä„ÅÆË¶ñËÅ¥ËÄÖÊï∞ (Viewers Per Channel) ---
        if vpc_weight > 0:
            viewers_per_channel = total_viewers / streamer_count
            # „Åì„ÅÆ„Çπ„Ç≥„Ç¢„ÅØÂçòÁ¥î„Å™Âä†ÁÆó„Åß„ÅØ„Å™„Åè„ÄÅÊåáÊ®ô„Åù„ÅÆ„ÇÇ„ÅÆ„Çí„Çπ„Ç≥„Ç¢„Å®„Åô„Çã
            # ‰æã: 1‰∫∫„ÅÇ„Åü„Çä50‰∫∫Ë¶ã„Å¶„ÅÑ„Çå„Å∞„ÄÅ„Çπ„Ç≥„Ç¢„Å´50„ÅåÂä†„Çè„Çã„Ç§„É°„Éº„Ç∏
            # Èáç„Åø(weight)„ÅØ„ÄÅ„Åù„ÅÆÂΩ±ÈüøÂ∫¶„ÇíË™øÊï¥„Åô„Çã„ÄåÂÄçÁéá„Äç„Å®„Åó„Å¶‰Ωø„ÅÜ
            vpc_score = viewers_per_channel * vpc_weight
            final_scores["viewers_per_ch_score"] = vpc_score
            final_flags.append(f"üë•VPC: {viewers_per_channel:.1f}")

        # --- ÂàÜÊûê‚ë°Ôºö„Éà„ÉÉ„ÉóÈÖç‰ø°ËÄÖ„Å∏„ÅÆ‰∫∫Ê∞óÈõÜ‰∏≠Â∫¶ (Top Share) ---
        if top_share_penalty:
            threshold = top_share_penalty.get('threshold', 0.8) # „Éá„Éï„Ç©„É´„Éà80%
            weight = top_share_penalty.get('weight', 0)
            
            # Ë¶ñËÅ¥ËÄÖÊï∞„ÅåÂ§ö„ÅÑÈ†Ü„Å´ÈÖç‰ø°„Çí‰∏¶„Å≥Êõø„Åà
            streams.sort(key=lambda s: s.viewer_count, reverse=True)
            
            # 1‰Ωç„ÅÆÈÖç‰ø°ËÄÖ„ÅÆË¶ñËÅ¥ËÄÖÊï∞„ÇíÂèñÂæó
            top_streamer_viewers = streams[0].viewer_count
            
            # 1‰Ωç„ÅÆÈÖç‰ø°ËÄÖ„Åå„ÄÅÂÖ®‰Ωì„ÅÆË¶ñËÅ¥ËÄÖÊï∞„ÅÆ‰Ωï%„ÇíÂç†„ÇÅ„Å¶„ÅÑ„Çã„ÅãË®àÁÆó
            top_share_ratio = top_streamer_viewers / total_viewers
            
            # ÈõÜ‰∏≠Â∫¶„Åå„Åó„Åç„ÅÑÂÄ§(threshold)„ÇíË∂Ö„Åà„Å¶„ÅÑ„Åü„Çâ„ÄÅ„Éö„Éä„É´„ÉÜ„Ç£
            if top_share_ratio > threshold:
                final_scores["top_share_penalty"] = -weight
                final_flags.append(f"Ïè†‰∫∫Ê∞óÈõÜ‰∏≠({top_share_ratio:.0%})")
        
        if final_scores:
            return {**final_scores, "source_hit_flags": final_flags}

    except Exception as e:
        print(f"‚ö†Ô∏è market_health.py„Åß„ÅÆAPI„Ç®„É©„Éº: {e}")
        return {}
            
    return {}